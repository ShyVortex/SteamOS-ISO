name: Convert SteamOS Recovery Image

permissions:
  contents: write

on:
  schedule:
    - cron: '0 2 * * *'   # daily at 02:00 UTC
  workflow_dispatch: {}

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso bzip2 curl git

      - name: Check latest image URL
        id: url
        run: |
          latest_url=$(curl -sSLI -o /dev/null -w '%{url_effective}' \
            https://steamdeck-images.steamos.cloud/recovery/steamdeck-repair-latest.img.bz2)
          echo "latest_url=$latest_url" >> "$GITHUB_OUTPUT"

      - name: Extract version
        id: version
        run: |
          filename=$(basename "${{ steps.url.outputs.latest_url }}")
          version=$(echo "$filename" \
            | sed -E 's/.*-([0-9]+\.[0-9]+\.[0-9]+)\.img\.bz2$/\1/')
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Check if release exists
        id: check
        uses: actions/github-script@v6
        with:
          script: |
            const tag = `v${{ steps.version.outputs.version }}`;
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              core.setOutput('exists', 'true');
            } catch {
              core.setOutput('exists', 'false');
            }

      - name: Skip if already released
        if: steps.check.outputs.exists == 'true'
        run: echo "Release v${{ steps.version.outputs.version }} already exists."

      - name: Download & convert image
        if: steps.check.outputs.exists == 'false'
        run: |
          url="${{ steps.url.outputs.latest_url }}"
          curl -sSL "$url" -o recovery.img.bz2
          bunzip2 -k recovery.img.bz2
          mv recovery.img recovery.raw
          xorriso -indev recovery.raw -outdev steamos-recovery.iso

      - name: Tag new release (annotated)
        if: steps.check.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          tag=v${{ steps.version.outputs.version }}
          git tag -a "$tag" -m "SteamOS $tag"
          git push origin "$tag"

      - name: Create and upload GitHub Release
        if: steps.check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: SteamOS ${{ steps.version.outputs.version }}
          files: steamos-recovery.iso
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
